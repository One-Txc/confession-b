
Spring Boot使用非常特别的PropertySource命令，旨在允许合理地覆盖值。属性按以下顺序选择：

在您的HOME目录设置的Devtools全局属性（~/.spring-boot-devtools.properties）。
单元测试中的 @TestPropertySource 注解。
单元测试中的 @SpringBootTest#properties 注解属性
命令行参数。
SPRING_APPLICATION_JSON 中的属性值（内嵌JSON嵌入到环境变量或系统属性中）。
ServletConfig 初始化参数。
ServletContext 初始化参数。
来自 java:comp/env 的JNDI属性。
Java系统属性（System.getProperties()）。
操作系统环境变量。
RandomValuePropertySource，只有随机的属性 random.* 中。
jar包外面的 Profile-specific application properties （application- {profile} .properties和YAML变体）
jar包内的 Profile-specific application properties （application-{profile}.properties和YAML变体）
jar包外的应用属性文件（application.properties和YAML变体）。
jar包内的应用属性文件（application.properties和YAML变体）。
在@Configuration上的@PropertySource注解。
默认属性（使用SpringApplication.setDefaultProperties设置）。

做个spring boot 监控文件夹的变化－－－非web








多环境的切换：
可以在开发时在配置文件中写：spring.profiles.active=dev(开发环境)
测试：在测试服务器上用start.sh运行：java -jar Chapter3-1-1-1.0.0.jar --spring.profiles.active=test
生产：在生产服务器上用start.sh运行：java -jar Chapter3-1-1-1.0.0.jar --spring.profiles.active=prod
这样感觉可以减少每次环境改变做的修改。也可以不使用maven的环境切换功能（maven的环境切换觉得比较麻烦，也可能是自己太菜了）


关于spring默认缓存－redis部分：
相关类：
org.springframework.data.redis.cache.RedisCacheManager              －－CacheManager
class org.springframework.data.redis.cache.RedisCache               －－Cache
org.springframework.cache.interceptor.SimpleKeyGenerator            －－默认的KeyGenerator生成类
org.springframework.cache.annotation.CachingConfigurerSupport       －－应该用于自定义配置的扩展类

注解
@Cacheable(value="user01-key")
1.CacheManager.getCache根据@Cacheable的value生成一个Cache对象
2.如果@CachePut／@Cacheable中的key属性
        没有指定：SimpleKeyGenerator.generateKey产生一个key(应该是用于redis数据库的存取)具体生成规则看类代码
        指定了属性：会根据值生成一个key具体类没找到
3.cache则做具体的存／取操作。

key属性说明：
@CachePut中的key属性，
    存的时候:
        key指向 基本类型／不可变对象(测试了String)：取方法执行前的值             －－－例如：key = "#name"；
        key指向 普通对象/普通对象的某个属性：取方法执行后的值                     －－－例如：key = "#user"；key = "#user.name"；
@Cacheable中的key属性，
    取的时候:取方法执行前的入参对象的数据，
    存的时候:
        key指向 基本类型／不可变对象(测试了String)／普通对象的某个属性：取方法执行前的值                －－－例如：key = "#user.name"；key = "#name"；
        key指向普通对象：取方法执行后的值                                                           －－－例如：key = "#user"；
建议：尽量让key取不会变的属性，这样不用注意这种细节。而且设计上应该也是取那种不被修改的属性吧



redis中同一个配置生成多个cache对象并没什么用。因为SimpleKeyGenerator生成的key和cacheName没什么关系。
建议：redis如果想要产生多个不同的cache对象，建议自己实现一个KeyGenerator，使生成的key前缀带上cacheName，不然没什么意义


spring-boot-redis:
	使用springboot的redis客户端，感觉很简单。
	1.加入依赖：spring-boot-starter-redis
	2.在配置文件中添加redis的属性设置：spring.redis.
	就可以使用spring的自动注入功能获取获取：StringRedisTemplate和RedisTemplate对象,
	他们的具体api参考http://www.jianshu.com/p/7bf5dc61ca06

 userList.forEach((user)->{
            System.out.println(user.toString());
            return; //不会中断循环
        });
 没法中途跳出的

 用spring的缓存机制还是mybatis的缓存机制？
        个人感觉spring的会用处大点。
        mybatis的一级缓   在spring web项目中一级缓存作用在被@Transactional注解的方法中。
                                参考MybatisTestController.xmlGetAll()方法加和不加@Transactional控制台的sql打印次数
                         而且一级缓存的功能可以通过代码的技巧实现。个人认为
        mybatis的二级缓存-- todo

 缓存和高并发的冲突？



